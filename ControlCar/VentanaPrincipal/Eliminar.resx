<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        REQEREBERAREQEREBERAREQP/9k=
</value>
  </data>
</root>